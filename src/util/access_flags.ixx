export module access_flags;

export enum {
    JVM_ACC_PUBLIC        = 0x0001,  // class field method, visible to everyone
    JVM_ACC_PRIVATE       = 0x0002,  //       field method, visible only to the defining class
    JVM_ACC_PROTECTED     = 0x0004,  //       field method, visible to subclasses
    JVM_ACC_STATIC        = 0x0008,  //       field method, instance variable is static
    JVM_ACC_FINAL         = 0x0010,  // class field method, no further subclassing, overriding
    JVM_ACC_SYNCHRONIZED  = 0x0020,  //             method, wrap method call in monitor lock
    JVM_ACC_SUPER         = 0x0020,  // class             , funky handling of invokespecial
    JVM_ACC_VOLATILE      = 0x0040,  //       field       , can not cache in registers
    JVM_ACC_BRIDGE        = 0x0040,  //             method, bridge method generated by compiler
    JVM_ACC_TRANSIENT     = 0x0080,  //       field       , not persistent
    JVM_ACC_VARARGS       = 0x0080,  //             method, method declared with variable number of args
    JVM_ACC_NATIVE        = 0x0100,  //             method, implemented in C
    JVM_ACC_INTERFACE     = 0x0200,  // class             , class is an interface
    JVM_ACC_ABSTRACT      = 0x0400,  // class       method, no definition provided
    JVM_ACC_STRICT        = 0x0800,  //             method, strict floating point
    JVM_ACC_SYNTHETIC     = 0x1000,  // class field method, compiler-generated class, method or field
    JVM_ACC_ANNOTATION    = 0x2000,  // class             , annotation type
    JVM_ACC_ENUM          = 0x4000,  // class field       , field is declared as element of enum
    JVM_ACC_MODULE        = 0x8000,  // class             , 表示class文件描述的是一个模块
    JVM_ACC_MANDATED      = 0x8000
};

export class AccessFlags {
private:
    int flags;

public:
    AccessFlags(): flags(0) {}
    explicit AccessFlags(int _flags): flags(_flags) {}

    void set(int _flags) { flags = _flags; }
    int get() { return flags; }

    // Java access flags
    bool isPublic      () const { return (flags & JVM_ACC_PUBLIC      ) != 0; }
    bool isPrivate     () const { return (flags & JVM_ACC_PRIVATE     ) != 0; }
    bool isProtected   () const { return (flags & JVM_ACC_PROTECTED   ) != 0; }
    bool isStatic      () const { return (flags & JVM_ACC_STATIC      ) != 0; }
    bool isFinal       () const { return (flags & JVM_ACC_FINAL       ) != 0; }
    bool isSynchronized() const { return (flags & JVM_ACC_SYNCHRONIZED) != 0; }
    bool isSuper       () const { return (flags & JVM_ACC_SUPER       ) != 0; }
    bool isVolatile    () const { return (flags & JVM_ACC_VOLATILE    ) != 0; }
    bool isTransient   () const { return (flags & JVM_ACC_TRANSIENT   ) != 0; }
    bool isNative      () const { return (flags & JVM_ACC_NATIVE      ) != 0; }
    bool isInterface   () const { return (flags & JVM_ACC_INTERFACE   ) != 0; }
    bool isAbstract    () const { return (flags & JVM_ACC_ABSTRACT    ) != 0; }
    bool isStrict      () const { return (flags & JVM_ACC_STRICT      ) != 0; }
    // Attribute flags
    bool isSynthetic   () const { return (flags & JVM_ACC_SYNTHETIC   ) != 0; }

    void setSynthetic  () { flags |= JVM_ACC_SYNTHETIC; }
};